en = data.frame(
stringsAsFactors = FALSE,
error = c(
"could not find function"
),
message = c(
"You might have forgotten to load a package or have mispelled the function name"
)
)
)[[lang]]
}
rules <- error_rules(lang)
grep(rules$error, err)
mean$iris
error_rules <- function(lang = "en"){
list(
en = data.frame(
stringsAsFactors = FALSE,
error = c(
"could not find function",
"object of type 'closure' is not subsettable"
),
message = c(
"You might have forgotten to load a package or have mispelled the function name",
"You might have tried to use a function where another kind of object is needed"
)
)
)[[lang]]
}
rules <- error_rules(lang)
grep(rules$error, err)
w <- grep(rules$error, err)
w <- grep("rules$error", err)
w
w == 0
length(w)
init_hemm()
iri()
init_hemm <- function(){
options("old_error" = getOption("error"))
options( error = function(...){
err <- geterrmessage()
friendly_error(err)
})
}
friendly_error <- function(err, lang = "en"){
rules <- error_rules(lang)
w <- grep(rules$error, err)
if (length(w) != 0){
message(rules[w, 2])
}
}
error_rules <- function(lang = "en"){
list(
en = data.frame(
stringsAsFactors = FALSE,
error = c(
"could not find function",
"object of type 'closure' is not subsettable"
),
message = c(
"You might have forgotten to load a package or have mispelled the function name",
"You might have tried to use a function where another kind of object is needed"
)
)
)[[lang]]
}
iri()
init_hemm <- function(){
options("old_error" = getOption("error"))
options( error = function(...){
err <- geterrmessage()
friendly_error(err)
})
}
friendly_error <- function(err, lang = "en"){
rules <- error_rules(lang)
w <- grep(rules$error, err)
if (length(w) != 0){
message("hemm...")
message(rules[w, 2])
}
}
error_rules <- function(lang = "en"){
list(
en = data.frame(
stringsAsFactors = FALSE,
error = c(
"could not find function",
"object of type 'closure' is not subsettable"
),
message = c(
"You might have forgotten to load a package or have mispelled the function name",
"You might have tried to use a function where another kind of object is needed"
)
)
)[[lang]]
}
init_hemm()
iri()
library(hemm)
library(hemm)
init_hemm()
iri()
mean$plop
init_hemm <- function(){
options("old_error" = getOption("error"))
options( error = function(...){
err <- geterrmessage()
friendly_error(err)
})
}
friendly_error <- function(err, lang = "en"){
browser()
rules <- error_rules(lang)
w <- grep(rules$error, err)
if (length(w) != 0){
cat("hemm...")
cat(rules[w, 2])
}
}
error_rules <- function(lang = "en"){
list(
en = data.frame(
stringsAsFactors = FALSE,
error = c(
"could not find function",
"object of type 'closure' is not subsettable"
),
message = c(
"You might have forgotten to load a package or have mispelled the function name",
"You might have tried to use a function where another kind of object is needed"
)
)
)[[lang]]
}
mean$plop
init_hemm <- function(){
options("old_error" = getOption("error"))
options( error = function(...){
err <- geterrmessage()
friendly_error(err)
})
}
friendly_error <- function(err, lang = "en"){
browser()
rules <- error_rules(lang)
w <- grep(rules$error, err)
if (length(w) != 0){
cat("hemm...")
cat(rules[w, 2])
}
}
error_rules <- function(lang = "en"){
list(
en = data.frame(
stringsAsFactors = FALSE,
error = c(
"could not find function",
"object of type 'closure' is not subsettable"
),
message = c(
"You might have forgotten to load a package or have mispelled the function name",
"You might have tried to use a function where another kind of object is needed"
)
)
)[[lang]]
}
init_hemm <- function(){
options("old_error" = getOption("error"))
options( error = function(...){
err <- geterrmessage()
friendly_error(err)
})
}
friendly_error <- function(err, lang = "en"){
browser()
rules <- error_rules(lang)
w <- grep(rules$error, err)
if (length(w) != 0){
cat("hemm...")
cat(rules[w, 2])
}
}
error_rules <- function(lang = "en"){
list(
en = data.frame(
stringsAsFactors = FALSE,
error = c(
"could not find function",
"object of type 'closure' is not subsettable"
),
message = c(
"You might have forgotten to load a package or have mispelled the function name",
"You might have tried to use a function where another kind of object is needed"
)
)
)[[lang]]
}
mean$plop
init_hemm <- function(){
options("old_error" = getOption("error"))
options( error = function(...){
browser()
err <- geterrmessage()
friendly_error(err)
})
}
friendly_error <- function(err, lang = "en"){
rules <- error_rules(lang)
w <- grep(rules$error, err)
if (length(w) != 0){
cat("hemm...")
cat(rules[w, 2])
}
}
error_rules <- function(lang = "en"){
list(
en = data.frame(
stringsAsFactors = FALSE,
error = c(
"could not find function",
"object of type 'closure' is not subsettable"
),
message = c(
"You might have forgotten to load a package or have mispelled the function name",
"You might have tried to use a function where another kind of object is needed"
)
)
)[[lang]]
}
mean$plop
init_hemm <- function(){
options("old_error" = getOption("error"))
options( error = function(...){
browser()
err <- geterrmessage()
friendly_error(err)
})
}
library(hemm)
iri()
mean$plop
init_hemm()
iri()
err <- geterrmessage()
friendly_error(err)
iri()
mean$plop
err <- geterrmessage()
friendly_error(err)
rules <- error_rules(lang)
lang = "en"
rules <- error_rules(lang)
rules
err
rules$error
grep(rules$error, err)
err
vapply(rules$error, function(x) grepl(x, err), FUN.VALUE = logicical(0), ...)
vapply(rules$error, function(x) grepl(x, err), FUN.VALUE = logical(0), ...)
lapply(rules$error, function(x) grepl(x, err))
sapply(rules$error, function(x) grepl(x, err))
which(sapply(rules$error, function(x) grepl(x, err)))
cat(rules[w, 2])
w <- which(sapply(rules$error, function(x) grepl(x, err)))
cat("hemm...\n")
cat(rules[w, 2])
which(vapply(rules$error, function(x) grepl(x, err), logical))
w <- which(vapply(rules$error, function(x) grepl(x, err), logical(0)))
w <- which(vapply(rules$error, function(x) grepl(x, err), logical(1)))
w
if (length(w) != 0){
cat("hemm...\n")
cat(rules[w, 2])
}
library(hemm)
library(hemm)
init_hemm()
iri()
library(hemm)
library(hemm)
init_hemm()
iri()
mean$plop
usethis::use_code_of_conduct()
colin::new_r_file("error_rules")
library(hemm)
library(hemm)
init_hemm()
iri()
library(hemm)
library(hemm)
init_hemm()
iri()
devtools::load_all()
library(hemm)
init_hemm()
iri()
lang = "en"
error_rules <- function(lang = "en"){
read.csv(stringsAsFactor = FALSE,
system.file(
paste0(lang, "_errors.csv"),
package = "hemm"
)
)
}
error_rules()
devtools::load_all()
iri()
library(hemm)
init_hemm()
iri()
mean$plop
c(1, 2, 3, 4 5, 6, 7, 8)
pkgload::load_all()
init_hemm()
library(pou)
#' @export
#' @rdname init
stop_hemm <- function(){
options("error" = getOption("old_error"))
}
stop_hemm()
getOption("error")
getOption("error")
pkgload::load_all()
init_hemm()
o$
@
oo
library(pp)
stop_hemm()
oo
library(hemm)
init_hemm()
iri()
library(hemm)
init_hemm()
iri()
library(hemm)
init_hemm()
iri()
v
iri()
library(hemm)
init_hemm()
getOption("error")
iri
iri()
mean$plop
"a" + "b"
library(hemm)
init_hemm()
"a" + "b"
requireNamespace("crayon")
crayon::red
crayon::red(a)
crayon::red("a")
cat("\033[31ma\033[39m")
crayon::red
print.AsIs(crayon::red)
devtools::load_all(".")
iris %>% mutate("pmo" =  1:160)
iris %>% mutate("pmo" =  1:150)
iris %>% mutate("pmo" =  1:150)
library(hemm)
iris %>% mutate("pmo" =  1:150)
init_hemm()
iris %>% mutate("pmo" =  1:150)
err <- geterrmessage()
err
rules <- error_rules(lang)
rules
w <- which(
vapply(
rules$error,
function(x) grepl(x, err),
logical(1))
)
w
cat("hemm...\n")
cat(rules[w, 2])
ules[w, 2]
rules[w, 2]
colin::new_r_file("zzz")
?onattach
?.onattach
?.onAttach
``` r
library(hemm)
init_hemm()
```
err <- geterrmessage()
friendly_error(err)
library(hemm)
``` r
library(hemm)
init_hemm()
```
```{r setup, include = FALSE}
``` r
library(hemm)
init_hemm()
```
pkgload::load_all()
pkgload::load_all()
pkgload::load_all()
.hemm <-   read.csv(
stringsAsFactor = FALSE,
system.file(
paste0("en", "_errors.csv"),
package = "hemm"
)
)
.hemm
``` r
library(hemm)
init_hemm()
```
pkgload::load_all()
init_hemm()
options("old_error" = getOption("error"))
options("old_error")
Q
?rlang
pkgload::load_all()
?rlang
init_hemm()
options("old_error" = getOption("error"))
getOption("error")
.hemm
init_hemm()
init_hemm()
.hemm
library(hemm)
.hemm
get(".hemm")
library(hemm)
hemm$hemm
library(hemm)
pkgload::load_all()
init_hemm()
options("old_error" = getOption("error"))
getOption("error")
iri
pkgload::load_all()
iri
init_hemm()
iri
pkgload::load_all()
init_hemm()
iri
w <- which(
vapply(
hemm$hemm$error,
function(x) grepl(x, err),
logical(1))
)
w
hemm$hemm[w, 2]
cat("hemm...\n")
cat(hemm$hemm[w, 2])
pkgload::load_all()
init_hemm()
iri
pkgload::load_all()
init_hemm()
iri
iri()
Error in iri() : could not find function "iri"
hemm...
You might have forgotten to load a package or have mispelled the function name.
nrow(read.csv("inst/en_error.csv"))
read.csv("inst/en_errors.csv")
iri
iri()
mean$plop
"a" + "b"
library(dlypr)
library(hemm)
library(hemm)
init_hemm()
iri
library(dlpyr)
mean$Sepal.Length
"a" + "b"
iris()
library(hemm)
init_hemm()
iri
options("error")
getOption("error")
getOption("error")()
getOption("error")
library(hemm)
init_hemm()
iri
library(dlpyr)
iri
devtools::load_all(".")
library(hemm)
init_hemm()
iri
library(dpylr)
"a" + "b"
mean$Sepal.Length
library(hemm)
init_hemm()
mean$Sepal.Length
init_hemm("fr")
